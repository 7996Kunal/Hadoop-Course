Some Important Classes of Hadoop
IntWritable
FloatWritable
DoubleWritable
BooleanWritable
BytesWritable
ByteWritable
LongWritable
NullWritable (Singleton Class)
ShortWritable
Text

Mapper<KEYIN,VALUEIN,KEYOUT,VALUEOUT>
protected void	map(KEYIN key, VALUEIN value, org.apache.hadoop.mapreduce.Mapper.Context context)

Class Reducer<KEYIN,VALUEIN,KEYOUT,VALUEOUT>
1.Shuffle
The Reducer copies the sorted output from each Mapper 
using HTTP across the network.

2.Sort
The framework merge sorts Reducer inputs by keys
(since different Mappers may have output the same key).

The shuffle and sort phases occur simultaneously i.e. while 
outputs are being fetched they are merged.

SecondarySort
To achieve a secondary sort on the values returned by the value 
iterator, the application should extend the key with the secondary key 
and define a grouping comparator. The keys will be sorted using the 
entire key, but will be grouped using the grouping comparator to decide 
which keys and values are sent in the same call to reduce.
The sort order is controlled by Job.setSortComparatorClass(Class).

3.Reduce
In this phase the 
reduce(Object, Iterable, org.apache.hadoop.mapreduce.Reducer.Context) 
method is called for each <key, (collection of values)> in the sorted inputs.


The output of the reduce task is typically written to a RecordWriter via 
TaskInputOutputContext.write(Object, Object).
-------------------------
Class Configuration
Configurations are specified by resources. A resource contains a set 
of name/value pairs as XML data. Each resource is named by either a 
String or by a Path. If named by a String, then the classpath is examined 
for a file with that name. If named by a Path, then the local filesystem is 
examined directly, without referring to the classpath.

Unless explicitly turned off, Hadoop by default specifies two resources, 
loaded in-order from the classpath:

core-default.xml: Read-only defaults for hadoop.
core-site.xml: Site-specific configuration for a given hadoop installation.
Applications may add additional resources, which are loaded subsequent 
to these resources in the order they are added.

Class Job
// Create a new Job
     Job job = Job.getInstance();
     //Job job=new Job(new Configuration(),"MyJob");
     job.setJarByClass(MyJob.class);
     
     // Specify various job-specific parameters     
     job.setJobName("myjob");
     
     job.setInputPath(new Path("in"));
     job.setOutputPath(new Path("out"));
     
     job.setMapperClass(MyJob.MyMapper.class);
     job.setReducerClass(MyJob.MyReducer.class);

     // Submit the job, then poll for progress until the job is complete
     job.waitForCompletion(true);
     
     
     Class Path
     Names a file or directory in a FileSystem. Path strings use slash as 
     the directory separator. A path string is absolute if it begins with a 
     slash.
     
     new Path(String pathString)
     new Path(Path parent, String child)
     
     FileSystem	getFileSystem(Configuration conf) 
     Return the FileSystem that owns this Path.
     	String getName()
     	Path getParent()